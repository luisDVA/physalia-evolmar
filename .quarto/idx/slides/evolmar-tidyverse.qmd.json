{"title":"Hands-On Data Manipulation and Visualization with the tidyverse and ggplot2","markdown":{"yaml":{"title":"Hands-On Data Manipulation and Visualization with the tidyverse and ggplot2","subtitle":"Physalia Courses Online - Evolmar 2023","author":"Luis D. Verde Arregoitia","format":{"revealjs":{"theme":"curso_styles.scss","transition":"fade","progress":true,"preview-links":true,"hide-inactive-cursor":true,"highlight-style":"printing","pause":true}},"editor":"source","knitr":{"opts_chunk":{"dev":"ragg_png","retina":3,"dpi":200}},"execute":{"freeze":"auto","cache":true,"echo":true,"fig-width":5,"fig-height":6}},"headingText":"Segment 1: Introduction to the tidyverse","containsRefs":false,"markdown":"\n\n```{r fa packages setup}\n#| echo: false\nlibrary(fontawesome)\n```\n\n```{r setup}\n#| echo: false\n#| message: false\n#| warning: false\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(here)\nlibrary(tidyr)\nlibrary(gt)\nlibrary(ggthemes)\nlibrary(patchwork)\nlibrary(ggtext)\n```\n\n\n::: columns\n::: {.column width=\"40%\"}\n![](imgs/luisbb.jpg){width=\"50%\"}\\\n[`r fontawesome::fa(name = \"twitter\")` \\@LuisDVerde](https://twitter.com/LuisDVerde)\\\n[`r fontawesome::fa(name = \"cloud\")` \\@LuisDVerde](https://bsky.app/profile/luisdverde.bsky.social)\\\n[`r fontawesome::fa(name = \"github\")` \\@LuisDVA](https://github.com/luisdva)\\\n[`r fontawesome::fa(name = \"link\")` liomys.mx](https://liomys.mx)\\\n[`r fontawesome::fa(name = \"paper-plane\")` luis\\@liomys.mx](mailto:luis@liomys.mx)\n:::\n\n::: {.column width=\"60%\"}\n\n-   Mammalogy, macroecology, conservation\n-   Biogeography, using R as a GIS\n-   Data Science with R\n-   Certified Instructor - Posit(RStudio) & The Carpentries  \n-   R user since 2011\\\n-   R 'blogger' since 2015\n:::\n:::\n\n\n\n\n- What is tidy data and the `tidyverse`?\n\n- Solving data manipulation challenges with `dplyr`\n\n- Creating tidy data with `tidyr`\n\n- Dates and times with `lubridate` \n\n- Dealing with categorical variables using `forcats`\n\n## \n\n### Segment 2: Data visualization with ggplot2\n\n- Graphics packages\n\n- Introduction to `ggplot2` \n\n- Groups, geoms, stats and layers\n\n- Scales, axes and legends\n\n- Facets, colour themes and general themes \n\n# Introduction to the tidyverse\n\n\n## \n\n![](imgs/data-science.png)\n\n::: {style=\"text-align: right\"}\n[R for Data Science (2e)](https://r4ds.hadley.nz/intro)\n:::\n\n## Tidy data\n\n- An accessible reformulation of existing principles and definitions from statistics and computer science, to help us structure our data for maximum usability.\n\n- With tidy data, we can focus on our tasks and use our preferred tools smoothly while taking advantage of R's vectorized nature.\n\n::: {style=\"text-align: right\"}\nHadley Wickham (2014)\\\n[Tidy Data](https://www.jstatsoft.org/article/view/v059i10/)\\\nJournal of Statistical Software\n:::\n\n\n## Tidy data principles\n\n-   Arranged in a 2D data matrix with rows and columns\n\n-   Columns correspond to variables\n\n-   Rows correspond to observations\n\n:::{.callout-note}\n##\n**Variable:** contains all values that measure the same underlying attribute \\\n**Observation:** contains all values measured on the same unit across attributes\n:::\n\n::: {style=\"text-align: right\"}\n[Principles of tidy data](https://jhudatascience.org/tidyversecourse/intro.html#principles-of-tidy-data)\\\nTidyverse Skills for Data Science\\\nWright et al. (2021)\n:::\n\n## Tidy data\n\nEach value in an observation will be paired with other values that appear in the same row\n\n![](imgs/discounts.png)\n\n##\n\nReady for input into plotting and modeling functions\n\n![](imgs/tidyvarsmap.png){fig-align=\"center\"}\n\n## \n\n![](imgs/tidyverse_celestial.png){fig-align=\"center}\n\n##\n\n> ... an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. Its primary goal is to facilitate a conversation between a human and a computer about data\n\n::: {style=\"text-align: right\"}\nWickham et al. (2019)\\\n[Welcome to the tidyverse](https://www.theoj.org/joss-papers/joss.01686/10.21105.joss.01686.pdf)\\\nhttps://www.tidyverse.org/\n:::\n\n## tidyverse\n\n-   For the most common tasks: data import, manipulation, visualization, and programming\n\n- Designed for easier learning and gradual engagement with additional pieces of the larger ecosystem\n\n- Pipe-friendly\n\n::: {style=\"text-align: right\"}\n√áetinkaya-Rundel et al. (2021)\\\nAn educator's perspective of the tidyverse\\\n[arxiv.org/abs/2108.03510](https://arxiv.org/abs/2108.03510)\n:::\n\n## Packages üì¶\n\nOut of the box, R is ready for most statistical analyses and data visualization task. However, > 20,000 additional packages exist to expand the capabilities of R.\n\n### Installing packages:\n`install.packages()` for CRAN packages, `remotes` for other sources\n\n### Loading packages:\n`library()` or the RStudio packages pane\n\n\n## Course setup {background-color=\"#a4c5ff\"}\n\n- Course folder\n- RStudio project\n- Course scripts - [download here](course_scripts.zip)\n- Check packages\n\n## tidy tools for preparing, transforming, and restructuring data\n\n::: columns\n::: {.column width=\"20%\"}\n![](imgs/dplyrlogo.png)\n![](imgs/tidyrlogo.png)\n:::\n\n::: {.column width=\"80%\"}\nFlexible, but developed around built-in features that support a particular way of doing things\n\n-   Hard to use incorrectly by accident\n-   Less code to achieve a goal\n-   Shared grammar and data structures\n-   Tasks split up across functions and packages\n:::\n:::\n\n## Pipes\n\nTo perform multiple operations in sequence:\n\n::: incremental\n-   Nested code (results evaluated from the inside out)\n\n-   Intermediate objects (assign objects with intermediate results and pass to the next function in a sequence)\n\n-   Pipes (structure sequential operations left-to-right)\n:::\n\n## Nested code\n\n</br>\n\n::: {.med-code}\n```{r}\n#| eval: true\n#| echo: true\n\nscores <- c(7,8,8,10,6,9,5,9,8)\n\nround(mean(scores), digits = 2)\n```\n:::\n\n## Intermediate objects\n\n</br>\n\n::: {.med-code}\n```{r}\n#| eval: true\n#| echo: true\nmn_scrs <- mean(scores)\n\nround(mn_scrs, digits = 2)\n\n```\n:::\n\n## Pipes\n`%>%` in `magrittr`; `|>` in R v \\>= 4.1.0\n\n::: fragment\n::: columns\n::: {.column width=\"30%\"}\nLeft Hand Side\\\n(LHS)\n:::\n\n::: {.column width=\"40%\"}\n`pipe operator`\n\n\n:::\n\n::: {.column width=\"30%\"}\nRight Hand Side\\\n(RHS)\n:::\n:::\n:::\n\n::: fragment\nTake an **object** on the **Left Hand Side** of the pipe and insert it into a **function** as an argument on the **Right Hand Side**\n\n\\* By default, **LHS** is placed as the **first** argument in the call\n:::\n\n## Pipes\n\n-   Minimize the need for intermediate objects and nested code\n\n-   Make code readable\n\n-   Easy to add or remove steps\n\n> Insert with `ctrl + shift + M`\n\n::: {style=\"text-align: right\"}\nAdolfo √Ålvarez (2021)\\\n[The (updated) history of the pipe operator in R](http://adolfoalvarez.cl/blog/2021-09-16-plumbers-chains-and-famous-painters-the-history-of-the-pipe-operator-in-r/)\n:::\n\n------------------------------------------------------------------------\n\n</br>\n\n::: {.med-code}\n```{r}\n#| echo: true\nlibrary(magrittr)\nscores %>% \n  mean() %>% \n  round(digits=2)\n```\n:::\n------------------------------------------------------------------------\n\n`LHS |> RHS(argument = 12)`\n\n*parses to*\n\n`RHS(LHS, argument = 12)`\n\n\n##\n\nwith `magrittr` pipe\n\n```{r}\n#| eval: true\n#| echo: true\n \nscores %>% \n  mean() %>%  \n  round(digits=2)\n```\n\nwith base pipe\n\n```{r}\n\nscores |> \n  mean() |> \n  round(digits=2)\n```\n\n> IDEs can toggle which pipe to insert\n\n::: {style=\"text-align: right\"}\nIsabella Vel√°squez (2022)\\\n[Understanding the native R pipe \\|\\>](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/)\n:::\n\n\n\n## üì¶ `dplyr` for data manipulation\n\n-   Separate functions for the most common operations\n\n-   Intuitive, user-friendly functions for:\n\n    -   Subsetting columns\n\n    -   Subsetting rows\n\n    -   Creating or modifying columns\n\n##\n\n```{r createsneakers}\n#| echo: false \n#| eval: true\n\nsneakers <- \ntibble::tribble(\n           ~Name,       ~Sport, ~Price, ~Rating,\n    \"Boost 3000\",    \"Running\",    99L,      4L,\n       \"HiSpeed\",    \"Running\",    44L,      4L,\n        \"Super2\",      \"Trail\",   100L,      5L,\n          \"Goal\",   \"Football\",   119L,      3L,\n       \"Goal2.0\",   \"Football\",    79L,      4L,\n   \"Airball Max\", \"Basketball\",    49L,      4L,\n    \"Glide Best\",    \"Running\",    55L,      5L,\n  \"Outdoor King\",      \"Trail\",   160L,      5L,\n          \"G90x\",   \"Football\",   120L,      4L,\n     \"Smith Pro\",    \"Running\",    89L,      4L,\n    \"Travel Low\", \"Basketball\",    89L,      3L\n  )\n\n\n```\n\n::: panel-tabset\n### sneakers\n\n```{r}\n#| echo: false \n#| eval: true\nsneakers %>% gt() %>% \n  tab_style(\n    cell_text(size = '21px'),\n    locations = list(cells_body(),\n                     cells_column_labels(everything()),\n                     cells_title()))\n```\n\n### Data Setup\n\n```{r}\n#| echo: true\n#| eval: false\nsneakers <- tibble::tribble(\n           ~Name,       ~Sport, ~Price, ~Rating,\n    \"Boost 3000\",    \"Running\",    99L,      4L,\n       \"HiSpeed\",    \"Running\",    44L,      4L,\n        \"Super2\",      \"Trail\",   100L,      5L,\n          \"Goal\",   \"Football\",   119L,      3L,\n       \"Goal2.0\",   \"Football\",    79L,      4L,\n   \"Airball Max\", \"Basketball\",    49L,      4L,\n    \"Glide Best\",    \"Running\",    55L,      5L,\n  \"Outdoor King\",      \"Trail\",   160L,      5L,\n          \"G90x\",   \"Football\",   120L,      4L,\n     \"Smith Pro\",    \"Running\",    89L,      4L,\n    \"Travel Low\", \"Basketball\",    89L,      3L)\n\n```\n:::\n\n## `select()`\n\n::: columns\n::: {.column width=\"38%\"}\n#### Subset variables\n\n- by name  \n- by position  \n- by type  \n:::\n\n::: {.column width=\"62%\"}\n::: {.med-code}\n```{r}\n#| echo: true\n#| eval: true\nsneakers %>% \n  select(Name, Sport) %>% \n  head(4)\n```\n:::\n:::\n:::\n\n## `mutate()`\n\n::: columns\n::: {.column width=\"50%\"}\n\n#### Create and modify columns\n\n- create new  \n- overwrite  \n:::\n\n::: {.column width=\"50%\"}\n```{r}\n#| echo: true\n#| eval: true\n\nsneakers %>%\n  select(Name, Rating) %>% \n  mutate(Rating= Rating*2) %>% \n  head(5)\n```\n:::\n:::\n\nWe can control where the new column will appear with `.before` and `.after`\n\n\n## `filter()`\n\n::: columns\n::: {.column width=\"48%\"}\n\n#### Subset rows\n\n- keep rows that meet a condition\n:::\n\n::: {.column width=\"52%\"}\n```{r}\n#| echo: true\n#| eval: true\nsneakers %>% \n  select(Name, Sport, Rating) %>% \n  filter(Rating == 5)\n```\n\n:::\n:::\n\n> `filter()` always needs a logical vector to keep/discard rows\n\n```{r}\nsneakers$Rating == 5\n```\n\n\n## Data manipulation challenge\n\n:::{.callout-note}\n##\nBefore manipulating data, we need to create our tabular objects\n:::\n\n- Import from files with `readr`\n- Load bundled data from a package with `data()`\n\n## Data manipulation challenge {background-color=\"#a4c5ff\"}\n\n### Import from file\n- Download the `possum.csv` file [here](exampleData/possum.csv)\n- Import the file (using `read_csv()` from `readr`)\n\n### Load from a package\n- load the `openintro` package\n- call a dataset with the `data()` function\n- package datasets often have documentation (`?possum`)\n\n\n## Data manipulation challenge {background-color=\"#a4c5ff\"}\n\n(separate tasks)\n\n- Subset the possum data to keep only males from Victoria and discard the _site_ column\n\n- Add a column with the tail length column in inches \n\n- Keep only sex, age, and site for females with head length > 91 cm\n\n- Suggest additional manipulations\n\n## tidy data with `tidyr`\n\n![](imgs/widelong.png){fig-align=\"center\"}\n\n::: columns\n::: {.column width=\"50%\"}\n### Wide Data\nHuman-readable  \nEasier entry  \nEasier interactive editing\n:::\n\n::: {.column width=\"50%\"}\n### Long Data\nUsually tidy  \nAnalysis-ready  \nMaps well to graphic parameters\n:::\n:::\n\n\n## Pivoting data\n\n\n- you may know these operations as `cast`, `melt`, `gather`, or `spread`\n\n![](imgs/pivotingintro.gif)\n  \n## \n\n<br/>\nwide to long: `pivot_longer()`  \n\n:::{.med-code}\n```{r}\n#| eval: false\n#| echo: true\n \npivot_longer(data, cols, names_to, values_to)\n```\n:::\n<br/>\nlong to wide: `pivot_wider()` \n\n:::{.med-code}\n```{r}\n#| echo: true\n#| eval: false\n \npivot_longer(data, cols,\n             names_from, values_from)\n```\n:::\n##\n\n```{r}\n#| eval: true\n#| echo: false\n\ndining <- \ntibble::tribble(\n     ~area_type, ~district, ~coffee_shops, ~fast_food, ~fish_chips,\n  \"Residential\",   \"South\",            2L,         3L,          1L,\n   \"Commercial\",   \"North\",           12L,         6L,          4L,\n     \"Suburban\",   \"South\",            2L,         4L,          3L,\n        \"Rural\",    \"East\",            0L,         2L,          0L\n  )\n\n```\n\n::: {.panel-tabset}\n## dining\n```{r}\n#| eval: true\n#| echo: false\n\ndining %>% gt() %>% \n    tab_style(\n    cell_text(size = '24px'),\n    locations = list(cells_body(),\n                     cells_column_labels(everything()),\n                     cells_title())) %>% \n  tab_options(table.background.color=\"#f4f4f9\")\n```\n\n## Data setup\n```{r panel-chunk-dining}\n#| eval: false\n#| echo: true\n\ndining <- \ntibble::tribble(\n     ~area_type, ~district, ~coffee_shops, ~fast_food, ~fish_chips,\n  \"Residential\",   \"South\",            2L,         3L,          1L,\n   \"Commercial\",   \"North\",           12L,         6L,          4L,\n     \"Suburban\",   \"South\",            2L,         4L,          3L,\n        \"Rural\",    \"East\",            0L,         2L,          0L\n  )\n```\n:::\n\n\n\n\n[Variables:]{style=\"font-size: 1.2em; text-align: center\"}\n\narea type\n\ndistrict\n\ntype of resturant\n\nnumber of restaurants\n\n## Wide to long\n\n```{r}\n#| eval: true\n#| echo: true\n\ndining_long <- dining %>%\n  pivot_longer(\n    cols = c(coffee_shops, fast_food, fish_chips),\n    names_to = \"restaurant_type\",\n    values_to = \"n_restaurants\")\n```\n\n```{r}\n#| eval: true\n#| echo: false\n\ndining_long <- dining %>%\n  pivot_longer(\n    cols = c(coffee_shops, fast_food, fish_chips),\n    names_to = \"restaurant_type\",\n    values_to = \"n_restaurants\")\n```\n\n\n**`cols`** Which columns have data in their names  \n\n\n**`names_to`** Name for the new column to be created from the names of each `cols`  \n\n**`values_to`** Name of the column to be created from the contents of the cells in **`cols`**  \n\n##\n\n```{r}\n#| eval: false\n#| echo: true\n\ndining %>%\n  pivot_longer(\n    cols = c(coffee_shops, fast_food, fish_chips),\n    names_to = \"restaurant_type\",\n    values_to = \"n_restaurants\")\n```\n\n##\n\n```{r}\n#| eval: true\n#| echo: true\ndining %>%\n  pivot_longer(\n    cols = c(coffee_shops, fast_food, fish_chips),\n    names_to = \"restaurant_type\",\n    values_to = \"n_restaurants\")\n```\n\n\n\n## Long to wide\n\n```{r}\n#| eval: false\n#| echo: true\n\ndining_long %>% \n  pivot_wider(names_from = restaurant_type, \n              values_from = n_restaurants)\n```\n\n\n**`names_from`** Which columns' distinct values will be used for new _column names_\n\n**`values_from`** Which column has the _cell values_ for the new output columns\n\n##\n\n```{r}\n#| eval: true\n#| echo: true\n\ndining_long %>% \n  pivot_wider(names_from = restaurant_type, \n              values_from = n_restaurants)\n```\n\n\n## Practice - Pivoting {background-color=\"#a4c5ff\"}\n\n- Load the dataset \"**arbuthnot**\" bundled with `openintro`\n\n- Identify the data structure and tidy the data\n\n- pivot back to inital structure\n\n## Dates and times with the `lubridate`\n\n::: columns\n::: {.column width=\"30%\"}\n![](imgs/lubridatelogo.png)\n:::\n\n::: {.column width=\"70%\"}\nWorking with dates and times (in general, and even in R) can be frustrating\n:::\n:::\n\n\n`lubridate` provides objects and functions for intuitive parsing of dates and times with less ambiguity \n\n> Easier temporal calculations (e.g. subtract dates, calculate periods of time, etc.)\n\n## \n\n:::{.med-code}\n```{r}\nlibrary(lubridate)\n# parse from text string to year/month/day\ndecdate <-  ymd(\"2010/12/21\") \nclass(decdate)\nyear(decdate)\nmonth(decdate)\nday(decdate)\nymd(\"2023-11-20\") - decdate\n```\n:::\n\n## Parsing dates {background-color=\"#a4c5ff\"}\n\n- Load the `birds` data from {openintro}\n\n- Examine the **date** column\n\n- Parse the date and create separate columns for month, day, and year\n\n- Put mdy together in a new variable (hint: `make_date` function)\n\n## Factors made easy with `forcats`\n\n### Categorical variables\n::: columns\n::: {.column width=\"50%\"}\n* Fixed set of possible values (levels)\n* Levels can be ordered (very useful for visualization)\n:::\n\n::: {.column width=\"50%\"}\n![](imgs/factor.jpg)\n:::\n:::\n\n\n## Factors\n\n:::{.med-code}\n```{r}\n#| echo: true\n#| output-location: slide\ndata(fastfood,package = \"openintro\")\nhead(fastfood)\n```\n:::\n\n## \n\nVariable as character vector\n\n:::{.big-code}\n```{r}\n#| echo: true\n#| output-location: slide\nfastfood$restaurant\n\n```\n:::\n\n## \n\nMake into factor\n\n:::{.big-code}\n```{r}\n#| echo: true\n#| output-location: slide\nfactor(fastfood$restaurant)\n```\n:::\n\n## \n\nQuery factor levels\n\n:::{.med-code}\n```{r}\n#| echo: true\nlevels(factor(fastfood$restaurant))\n```\n:::\n\n> How are the levels ordered?\n\n## Factor levels\n\nWe can specify factor levels manually with the `levels` argument\n\n```{r}\n#| echo: true\nnewlevels <- c(\"Mcdonalds\",\"Arbys\",\"Burger King\",\"Subway\",\n               \"Chick Fil-A\",\"Dairy Queen\",\"Taco Bell\",\"Sonic\")\nlevels(factor(fastfood$restaurant,levels = newlevels))\n```\n\n## Factors made easy with `forcats` \n\n::: columns\n::: {.column width=\"61%\"}\nTools for working with categorical variables\n:::\n\n::: {.column width=\"38%\"}\n![](imgs/forcatslogo.png)\n:::\n:::\n\n- reorder a factor with another variable's values\n- suppress alphabetical ordering\n- reverse factor levels\n- group levels\n\n##\n\n```{r}\nsneakers\n```\n\n\n##\n\n:::{.med-code}\n```{r}\nfactor(sneakers$Sport)\n```\n:::\n\nQuery levels\n\n:::{.med-code}\n```{r}\nfactor(sneakers$Sport) %>% levels()\n```\n:::\n\n##\n\nKeep order of appearance\n\n:::{.med-code}\n```{r}\nlibrary(forcats)\nfct_inorder(sneakers$Sport)\n```\n:::\n\n##\n\nOrder by frequency\n\n:::{.med-code}\n```{r}\nfct_infreq(sneakers$Sport)\n```\n:::\n\n##\n\nReverse order\n\n:::{.med-code}\n```{r}\nfct_rev(sneakers$Sport)\n```\n:::\n\n##\n\nSubset - one shoe per sport\n```{r}\nsneakersSubset <- sneakers %>% slice(1,3,4,6) \nsneakersSubset\n```\n\nReorder levels by price\n\n```{r}\nfct_reorder(sneakersSubset$Sport,sneakersSubset$Price)\n```\n\n`.desc` argument for descending order\n\n# Data visualization with `ggplot2`\n\n## Graphics in R\n\nSince its initial release, R has had the ability to produce customizable \npublication-quality graphics.\n\n- Base R plots \n- Lattice plots (`lattice` package)\n- `ggplot2`\n- wrapper packages (`highcharter`, `echarts4r`)\n\n::: {style=\"text-align: right\"}\n[4. Graphics with base R](https://intro2r.com/graphics_base_r.html])\\  \nAn Introduction to R\\\nAlex Douglas et al. (2023)\n:::\n\n## \n\n:::{style=\"text-align:center\"}\n[The Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0)  \nWilkinson (1999, 2005)  \n\n[A Layered Grammar of Graphics](ttps://doi.org/10.1198/jcgs.2009.07098)  \nHadley Wickham (2007)\n:::\n\n::: {layout-nrow=1}\n![](imgs/ggwilk.jpg)\n![](imgs/layered.png){width=\"20%\"}\n![](imgs/ggplot2.png){width=\"20%\"}\n![](imgs/ggpltcht.jpeg){width=\"20%\"}\n:::\n\n## \n\n**Grammar**: how words and their component parts combine to form sentences\n\n<br/>\n\n- With a grammar we don't need to memorize individual sentences to communicate in a language\n\n- If we learn a grammar for graphics, we can describe and build a wide range of statistical graphics from scratch\n\n\n## Layered graphics\n\n![](imgs/grammar.png){fig-align=\"center\"}\n\n## {background-image=\"imgs/blocks.jpg\"}\n\n### Building a ggplot\n\n<br/>\n\n`data` - object with the data we wish to visualize \n\n<br/>\n\n`aes` (mapping) - definition of how variables in the dataset are mapped to visual properties (aesthetics) of the plot\n\n<br/>\n\n`geom` - geometrical object that represents data\n\n##\n\n::: {.big-code}\n```{r}\n#| eval: false\n#| echo: true\nggplot(data, aes(x,y)) +\n  geom_point()\n```\n:::\n\n</br>\n</br>\n`ggplot()` creates the plot  \n\n`aes()` links variables in the data with visual properties of the plot\n\n`geom_*` defines a layer with a visual representation of the data\n\n##\n\n::: panel-tabset\n\n### lizards\n\n```{r}\n#| eval: true\n#| echo: false\ntibble::tribble(\n  ~length, ~mass,     ~stage,\n      9L,   20L,  \"adult\",\n      8L,   13L, \"juvenile\",\n      7L,   15L, \"juvenile\",\n     13L,   18L,  \"adult\",\n     11L,   21L,  \"adult\",\n      6L,   14L, \"juvenile\"\n  ) %>% gt() %>% \n    tab_style(\n    cell_text(size = '33px'),\n    locations = list(cells_body(),\n                     cells_column_labels(everything()),\n                     cells_title())) %>% \n  tab_options(table.background.color=\"#f4f4f9\")\n```\n\n### Data\n\n```{r}\n#| eval: false\n#| echo: true\n\nlizards <- \ntibble::tribble(\n  ~length, ~mass,     ~stage,\n       9L,   20L,    \"adult\",\n       8L,   13L, \"juvenile\",\n       7L,   15L, \"juvenile\",\n      13L,   18L,    \"adult\",\n      11L,   21L,    \"adult\",\n       6L,   14L, \"juvenile\"\n  )\n\n```\n:::\n\n----------------\n\n::: columns\n::: {.column width=\"50%\"}\n```{r}\n#| echo: false\n \ntibble::tribble(\n  ~length, ~mass,     ~stage,\n       9L,   20L,    \"adult\",\n       8L,   13L, \"juvenile\",\n       7L,   15L, \"juvenile\",\n      13L,   18L,    \"adult\",\n      11L,   21L,    \"adult\",\n       6L,   14L, \"juvenile\"\n  ) %>% gt() %>% tab_style(\n    cell_text(size = '34px'),\n    locations = list(cells_body(),\n                     cells_column_labels(everything()),\n                     cells_title())) %>% \n  tab_options(table.background.color=\"#f4f4f9\")\n\n```\n:::\n\n::: {.column width=\"50%\"}\n```{r}\n#| echo: false\n \ntibble::tribble(\n   ~x,  ~y,     ~shape,\n   9L, 20L,   \"circle\",\n   8L, 13L, \"triangle\",\n   7L, 15L, \"triangle\",\n  13L, 18L,   \"circle\",\n  11L, 21L,   \"circle\",\n   6L, 14L, \"triangle\"\n  ) %>% gt() %>% tab_style(\n    cell_text(size = '34px'),\n    locations = list(cells_body(),\n                     cells_column_labels(everything()),\n                     cells_title())) %>% \n  tab_options(table.background.color=\"#f4f4f9\")\n\n```\n:::\n:::\n\n##\n\n```{r}\n#| echo: false\n#| eval: true\n\nlizards <- \ntibble::tribble(\n  ~length, ~mass,     ~stage,\n       9L,   20L,    \"adult\",\n       8L,   13L, \"juvenile\",\n       7L,   15L, \"juvenile\",\n      13L,   18L,    \"adult\",\n      11L,   21L,    \"adult\",\n       6L,   14L, \"juvenile\"\n  )\n```\n\n\n```{r}\nggplot(data = lizards,     \n  aes(x = length,y = mass))+\n  geom_point()\n```\n\n# Hands-on  {background-color=\"#a4c5ff\"}\n\n- Open the file  `01_first-plots.R`\n- Follow along\n\n# Customization\n\nWe can modify everything that we see in a plot  \n\n::: columns\n::: {.column width=\"30%\"}\n`labs`  \n`fill`  \n`color`  \n`size`  \n`themes`  \n`scale_fill_*`  \n`scale_shape_*`  \n`scale_color_*`  \n:::\n\n::: {.column width=\"70%\"}\nlabels for axes, titles, etc.  \nfill colors     \nborder colors    \nobject sizes  \npreset looks \n  \n  \nmanual control over mappings (color, fill, shape)\n:::\n:::\n\n##\n\n`ggplot2` has built-in defaults for shapes and colors \n\n\n::: {layout-nrow=1}\n![](imgs/defshapes.png)\n![](imgs/defcols.jpg){width=\"40%\"}\n:::\n\n\n## Non-default colors and shapes\n\nManual control with vectors (fills, colors, shapes) for the `values` argument of `scale_*_*` functions\n\n\n:::{.med-code}\n```{r}\n#| eval: false\n#| echo: true\n\nggplot(penguins,\n     aes(x=bill_length_mm,\n         y=flipper_length_mm,\n        shape=species,color=species))+\n geom_point()+\n scale_color_manual(values=\n              c('pink','blue',\"red\"))+\n scale_shape_manual(values=\n              c(20,21,22))\n\n```\n:::\n\n## Colors\n\nHTML names\n\n::: {layout-nrow=1}\n![](https://kktg.net/sgr/wp-content/uploads/colors2.png){width=\"44%\"}\n![](https://kktg.net/sgr/wp-content/uploads/colors4.png){width=\"44%\"}\n:::\n\n## Colors\n\nHex codes\n\n![](imgs/hexpals.png){fig-align=\"center\"}\n\nFree Color Picker (Windows); Gpick (Linux); ColorSlurp (Mac)\n\n\n## Color palettes\n\n::: columns\n::: {.column width=\"50%\"}\n- Specify a named palette  \n- Define with a vector\n:::\n\n::: {.column width=\"50%\"}\n![](imgs/ejemplocool.png){fig-align=\"center\"}\n:::\n:::\n\nüîó Example gallery for [`paletteer`](https://pmassicotte.github.io/paletteer_gallery/)  \n\nüîó [Pokepalettes](https://pokepalettes.com/)\n\n## Legend titles\n\nThe `name` arguments modifies the title for legends created automatically for each mapping  \n\n:::{.med-code}\n```{r}\n#| eval: false\n#| echo: true\n\naes(x,y, color = var1, shape = var2)+\n\tscale_color_manual(values=c('red','blue'), \n\t                   name= 'Variable One')+\n  scale_shape_manual(values=c(20,21),\n\t                   name = 'Variable Two')\n\t\n\n```\n\n:::\n\n## *Quantitative* variables + color:  \n\n- Default color ramp or named gradient\n- Define gradient with `scale_x_gradient` \n\n```{r}\n#| eval: true\n#| echo: false\nlibrary(palmerpenguins)\ndata(penguins)\n```\n\n```{r}\n#| echo: true\n#| output-location: column-fragment\n\nggplot(penguins,\n  aes(x=bill_length_mm,\n      y=flipper_length_mm,\n      fill=body_mass_g))+\n  geom_point(size=4,\n             color=\"white\",\n             pch=21)\n```\n\n## Hands-on: Customization  {background-color=\"#a4c5ff\"}\n\nModifying graphical parameters\n\n:::{style=\"font-size: 1.5em;\"}\n`02_customizing.R`{style=\"color:orange\"}  \n:::\n\n## Themes \n\nControl multiple visual parameters without altering the underlying data\n\n- 8 themes available with `ggplot2`  \n- packages with additional themes: [`ggthemes`](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/), [`artyfarty`](https://datarootsio.github.io/artyfarty/articles/introduction.html), [`hrbrthemes`](https://github.com/hrbrmstr/hrbrthemes)`  \n- create our own\n\n![](imgs/themesgg.png){width=\"60%\"}\n\n## Color ramps\n\n- More accurate visual perception of central value and increments of the underlying variables\n\n![](imgs/batlow.png){fig-align=\"center\" fig-size=\"80%\"}\n  \n:::{style=\"text-align:center\"}  \nüîó Fabio Crameri - [Scientific Color Maps](https://www.fabiocrameri.ch/colourmaps/)\n:::\n\n## Perceptually uniform color ramps\n\n::: columns\n::: {.column width=\"45%\"}\n![](imgs/viridis-scales.png){width=\"65%\"}\n![](imgs/scicopals.png){width=\"65%\"}\n:::\n\n::: {.column width=\"55%\"}\n### viridis\n- installed with `ggplot2`\n- call with `scale_x_viridis()`  \n  \n### scico\n- provided by `scico` package\n- divergent & sequential\n:::\n:::\n\n## Hands-on: Color ramps {background-color=\"#a4c5ff\"}\n\nColors and continuous variables\n\n:::{style=\"font-size: 1.5em;\"}\n`03_ramps.R`{style=\"color:orange\"}  \n:::\n\n\n## Exporting graphics\n\n### Our options\n\n- 'Export' button in RStudio\n- Graphical devices\n- `ggsave()`  \n- Formats: png, jpg, pdf, etc.\n\n## Export with graphical device\n\n:::{.callout-note}\n## \nWe can asign plots to workspace objects\n:::\n\n```{r}\n#| echo: true\n#| eval: false\n\nmy_plot <- \nggplot(penguins,\n       aes(x=bill_length_mm,\n          y=flipper_length_mm))+\n  geom_point(size=2,pch=21)\n\npng(filename = \"myplot.png\",\n    width = 10, \n    height = 10,\n    units =\"cm\",\n    res = 200)\nmy_plot\ndev.off()\n```\n\n## `agg` devices\n\n- Fast and crisp\n- Provided with `ragg`\n\n::: {.med-code}\n```{r}\n#| echo: true\n#| eval: false\n\nagg_png(filename = \"myraggplot.png\",\n    width = 10, height = 10,\n    units =\"cm\",\n    res = 200)\nmy_plot\ndev.off()\n```\n:::\n\n## `ggsave()`\n\n- Will use `ragg` if it is installed\n\n::: {.big-code}\n```{r}\n#| echo: true\n#| eval: false\n\nggsave(my_plot, \n  filename = \"myplotgs.png\",\n    width = 10, \n    height = 10,\n    units =\"cm\",\n    dpi = 200)\n\n```\n:::\n\n## Looks off?\n\n![](imgs/exportando.png)\n\n`scale` argument for `ggsave()` and `scaling` in `ragg` devices will adjust points and text with a scaling factor\n\n\n## Facetting\n\n![](imgs/exprgutsoct2021_final.png){fig-align=\"center\"}\n\n## Facet functions\n\n`facet_wrap()`{style=\"color:orange\" size=1.2em} splits by one variable and wraps the resulting subplots\n\n`facet_grid()`{style=\"color:orange\" size=1.2em} splits by combinations of variables\n\n![](imgs/position-facets.png){fig-align=\"center\"}\n\n## Hands-on: Facets {background-color=\"#a4c5ff\"}\n\n`starbucks ` coffee shop data from `openintro`\n\n:::{style=\"font-size: 1.5em;\"}\n`04_facets.R`{style=\"color:orange\"}  \n:::\n\n\n## Factors and plots\n\nValues for categorical variables will be ordered alphabetically unless specified otherwise\n\n```{r}\n#| echo: false\n#| eval: true\n\ndata(\"starbucks\",package = \"openintro\")\n```\n\n\n```{r}\n#| echo: true\n#| eval: true\nggplot(starbucks,aes(fat,protein))+\n  geom_point()+facet_wrap(\"type\")\n```\n\n\n## Hands-on: Reordering factor levels {background-color=\"#a4c5ff\"}\n\n`babies_crawl` crawling age data from `openintro`\n\n:::{style=\"font-size: 1.5em;\"}\n`05_reorder.R`{style=\"color:orange\"}  \n:::\n\n:::{.callout-note}\n## \nCrawling age (weeks) in relation to temperature and birth month. From Benson (1993).\n:::\n\n\n## Questions?\n\n# Thank you!","srcMarkdownNoYaml":"\n\n```{r fa packages setup}\n#| echo: false\nlibrary(fontawesome)\n```\n\n```{r setup}\n#| echo: false\n#| message: false\n#| warning: false\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(here)\nlibrary(tidyr)\nlibrary(gt)\nlibrary(ggthemes)\nlibrary(patchwork)\nlibrary(ggtext)\n```\n\n## \n\n::: columns\n::: {.column width=\"40%\"}\n![](imgs/luisbb.jpg){width=\"50%\"}\\\n[`r fontawesome::fa(name = \"twitter\")` \\@LuisDVerde](https://twitter.com/LuisDVerde)\\\n[`r fontawesome::fa(name = \"cloud\")` \\@LuisDVerde](https://bsky.app/profile/luisdverde.bsky.social)\\\n[`r fontawesome::fa(name = \"github\")` \\@LuisDVA](https://github.com/luisdva)\\\n[`r fontawesome::fa(name = \"link\")` liomys.mx](https://liomys.mx)\\\n[`r fontawesome::fa(name = \"paper-plane\")` luis\\@liomys.mx](mailto:luis@liomys.mx)\n:::\n\n::: {.column width=\"60%\"}\n\n-   Mammalogy, macroecology, conservation\n-   Biogeography, using R as a GIS\n-   Data Science with R\n-   Certified Instructor - Posit(RStudio) & The Carpentries  \n-   R user since 2011\\\n-   R 'blogger' since 2015\n:::\n:::\n\n\n## \n\n### Segment 1: Introduction to the tidyverse\n\n- What is tidy data and the `tidyverse`?\n\n- Solving data manipulation challenges with `dplyr`\n\n- Creating tidy data with `tidyr`\n\n- Dates and times with `lubridate` \n\n- Dealing with categorical variables using `forcats`\n\n## \n\n### Segment 2: Data visualization with ggplot2\n\n- Graphics packages\n\n- Introduction to `ggplot2` \n\n- Groups, geoms, stats and layers\n\n- Scales, axes and legends\n\n- Facets, colour themes and general themes \n\n# Introduction to the tidyverse\n\n\n## \n\n![](imgs/data-science.png)\n\n::: {style=\"text-align: right\"}\n[R for Data Science (2e)](https://r4ds.hadley.nz/intro)\n:::\n\n## Tidy data\n\n- An accessible reformulation of existing principles and definitions from statistics and computer science, to help us structure our data for maximum usability.\n\n- With tidy data, we can focus on our tasks and use our preferred tools smoothly while taking advantage of R's vectorized nature.\n\n::: {style=\"text-align: right\"}\nHadley Wickham (2014)\\\n[Tidy Data](https://www.jstatsoft.org/article/view/v059i10/)\\\nJournal of Statistical Software\n:::\n\n\n## Tidy data principles\n\n-   Arranged in a 2D data matrix with rows and columns\n\n-   Columns correspond to variables\n\n-   Rows correspond to observations\n\n:::{.callout-note}\n##\n**Variable:** contains all values that measure the same underlying attribute \\\n**Observation:** contains all values measured on the same unit across attributes\n:::\n\n::: {style=\"text-align: right\"}\n[Principles of tidy data](https://jhudatascience.org/tidyversecourse/intro.html#principles-of-tidy-data)\\\nTidyverse Skills for Data Science\\\nWright et al. (2021)\n:::\n\n## Tidy data\n\nEach value in an observation will be paired with other values that appear in the same row\n\n![](imgs/discounts.png)\n\n##\n\nReady for input into plotting and modeling functions\n\n![](imgs/tidyvarsmap.png){fig-align=\"center\"}\n\n## \n\n![](imgs/tidyverse_celestial.png){fig-align=\"center}\n\n##\n\n> ... an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. Its primary goal is to facilitate a conversation between a human and a computer about data\n\n::: {style=\"text-align: right\"}\nWickham et al. (2019)\\\n[Welcome to the tidyverse](https://www.theoj.org/joss-papers/joss.01686/10.21105.joss.01686.pdf)\\\nhttps://www.tidyverse.org/\n:::\n\n## tidyverse\n\n-   For the most common tasks: data import, manipulation, visualization, and programming\n\n- Designed for easier learning and gradual engagement with additional pieces of the larger ecosystem\n\n- Pipe-friendly\n\n::: {style=\"text-align: right\"}\n√áetinkaya-Rundel et al. (2021)\\\nAn educator's perspective of the tidyverse\\\n[arxiv.org/abs/2108.03510](https://arxiv.org/abs/2108.03510)\n:::\n\n## Packages üì¶\n\nOut of the box, R is ready for most statistical analyses and data visualization task. However, > 20,000 additional packages exist to expand the capabilities of R.\n\n### Installing packages:\n`install.packages()` for CRAN packages, `remotes` for other sources\n\n### Loading packages:\n`library()` or the RStudio packages pane\n\n\n## Course setup {background-color=\"#a4c5ff\"}\n\n- Course folder\n- RStudio project\n- Course scripts - [download here](course_scripts.zip)\n- Check packages\n\n## tidy tools for preparing, transforming, and restructuring data\n\n::: columns\n::: {.column width=\"20%\"}\n![](imgs/dplyrlogo.png)\n![](imgs/tidyrlogo.png)\n:::\n\n::: {.column width=\"80%\"}\nFlexible, but developed around built-in features that support a particular way of doing things\n\n-   Hard to use incorrectly by accident\n-   Less code to achieve a goal\n-   Shared grammar and data structures\n-   Tasks split up across functions and packages\n:::\n:::\n\n## Pipes\n\nTo perform multiple operations in sequence:\n\n::: incremental\n-   Nested code (results evaluated from the inside out)\n\n-   Intermediate objects (assign objects with intermediate results and pass to the next function in a sequence)\n\n-   Pipes (structure sequential operations left-to-right)\n:::\n\n## Nested code\n\n</br>\n\n::: {.med-code}\n```{r}\n#| eval: true\n#| echo: true\n\nscores <- c(7,8,8,10,6,9,5,9,8)\n\nround(mean(scores), digits = 2)\n```\n:::\n\n## Intermediate objects\n\n</br>\n\n::: {.med-code}\n```{r}\n#| eval: true\n#| echo: true\nmn_scrs <- mean(scores)\n\nround(mn_scrs, digits = 2)\n\n```\n:::\n\n## Pipes\n`%>%` in `magrittr`; `|>` in R v \\>= 4.1.0\n\n::: fragment\n::: columns\n::: {.column width=\"30%\"}\nLeft Hand Side\\\n(LHS)\n:::\n\n::: {.column width=\"40%\"}\n`pipe operator`\n\n\n:::\n\n::: {.column width=\"30%\"}\nRight Hand Side\\\n(RHS)\n:::\n:::\n:::\n\n::: fragment\nTake an **object** on the **Left Hand Side** of the pipe and insert it into a **function** as an argument on the **Right Hand Side**\n\n\\* By default, **LHS** is placed as the **first** argument in the call\n:::\n\n## Pipes\n\n-   Minimize the need for intermediate objects and nested code\n\n-   Make code readable\n\n-   Easy to add or remove steps\n\n> Insert with `ctrl + shift + M`\n\n::: {style=\"text-align: right\"}\nAdolfo √Ålvarez (2021)\\\n[The (updated) history of the pipe operator in R](http://adolfoalvarez.cl/blog/2021-09-16-plumbers-chains-and-famous-painters-the-history-of-the-pipe-operator-in-r/)\n:::\n\n------------------------------------------------------------------------\n\n</br>\n\n::: {.med-code}\n```{r}\n#| echo: true\nlibrary(magrittr)\nscores %>% \n  mean() %>% \n  round(digits=2)\n```\n:::\n------------------------------------------------------------------------\n\n`LHS |> RHS(argument = 12)`\n\n*parses to*\n\n`RHS(LHS, argument = 12)`\n\n\n##\n\nwith `magrittr` pipe\n\n```{r}\n#| eval: true\n#| echo: true\n \nscores %>% \n  mean() %>%  \n  round(digits=2)\n```\n\nwith base pipe\n\n```{r}\n\nscores |> \n  mean() |> \n  round(digits=2)\n```\n\n> IDEs can toggle which pipe to insert\n\n::: {style=\"text-align: right\"}\nIsabella Vel√°squez (2022)\\\n[Understanding the native R pipe \\|\\>](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/)\n:::\n\n\n\n## üì¶ `dplyr` for data manipulation\n\n-   Separate functions for the most common operations\n\n-   Intuitive, user-friendly functions for:\n\n    -   Subsetting columns\n\n    -   Subsetting rows\n\n    -   Creating or modifying columns\n\n##\n\n```{r createsneakers}\n#| echo: false \n#| eval: true\n\nsneakers <- \ntibble::tribble(\n           ~Name,       ~Sport, ~Price, ~Rating,\n    \"Boost 3000\",    \"Running\",    99L,      4L,\n       \"HiSpeed\",    \"Running\",    44L,      4L,\n        \"Super2\",      \"Trail\",   100L,      5L,\n          \"Goal\",   \"Football\",   119L,      3L,\n       \"Goal2.0\",   \"Football\",    79L,      4L,\n   \"Airball Max\", \"Basketball\",    49L,      4L,\n    \"Glide Best\",    \"Running\",    55L,      5L,\n  \"Outdoor King\",      \"Trail\",   160L,      5L,\n          \"G90x\",   \"Football\",   120L,      4L,\n     \"Smith Pro\",    \"Running\",    89L,      4L,\n    \"Travel Low\", \"Basketball\",    89L,      3L\n  )\n\n\n```\n\n::: panel-tabset\n### sneakers\n\n```{r}\n#| echo: false \n#| eval: true\nsneakers %>% gt() %>% \n  tab_style(\n    cell_text(size = '21px'),\n    locations = list(cells_body(),\n                     cells_column_labels(everything()),\n                     cells_title()))\n```\n\n### Data Setup\n\n```{r}\n#| echo: true\n#| eval: false\nsneakers <- tibble::tribble(\n           ~Name,       ~Sport, ~Price, ~Rating,\n    \"Boost 3000\",    \"Running\",    99L,      4L,\n       \"HiSpeed\",    \"Running\",    44L,      4L,\n        \"Super2\",      \"Trail\",   100L,      5L,\n          \"Goal\",   \"Football\",   119L,      3L,\n       \"Goal2.0\",   \"Football\",    79L,      4L,\n   \"Airball Max\", \"Basketball\",    49L,      4L,\n    \"Glide Best\",    \"Running\",    55L,      5L,\n  \"Outdoor King\",      \"Trail\",   160L,      5L,\n          \"G90x\",   \"Football\",   120L,      4L,\n     \"Smith Pro\",    \"Running\",    89L,      4L,\n    \"Travel Low\", \"Basketball\",    89L,      3L)\n\n```\n:::\n\n## `select()`\n\n::: columns\n::: {.column width=\"38%\"}\n#### Subset variables\n\n- by name  \n- by position  \n- by type  \n:::\n\n::: {.column width=\"62%\"}\n::: {.med-code}\n```{r}\n#| echo: true\n#| eval: true\nsneakers %>% \n  select(Name, Sport) %>% \n  head(4)\n```\n:::\n:::\n:::\n\n## `mutate()`\n\n::: columns\n::: {.column width=\"50%\"}\n\n#### Create and modify columns\n\n- create new  \n- overwrite  \n:::\n\n::: {.column width=\"50%\"}\n```{r}\n#| echo: true\n#| eval: true\n\nsneakers %>%\n  select(Name, Rating) %>% \n  mutate(Rating= Rating*2) %>% \n  head(5)\n```\n:::\n:::\n\nWe can control where the new column will appear with `.before` and `.after`\n\n\n## `filter()`\n\n::: columns\n::: {.column width=\"48%\"}\n\n#### Subset rows\n\n- keep rows that meet a condition\n:::\n\n::: {.column width=\"52%\"}\n```{r}\n#| echo: true\n#| eval: true\nsneakers %>% \n  select(Name, Sport, Rating) %>% \n  filter(Rating == 5)\n```\n\n:::\n:::\n\n> `filter()` always needs a logical vector to keep/discard rows\n\n```{r}\nsneakers$Rating == 5\n```\n\n\n## Data manipulation challenge\n\n:::{.callout-note}\n##\nBefore manipulating data, we need to create our tabular objects\n:::\n\n- Import from files with `readr`\n- Load bundled data from a package with `data()`\n\n## Data manipulation challenge {background-color=\"#a4c5ff\"}\n\n### Import from file\n- Download the `possum.csv` file [here](exampleData/possum.csv)\n- Import the file (using `read_csv()` from `readr`)\n\n### Load from a package\n- load the `openintro` package\n- call a dataset with the `data()` function\n- package datasets often have documentation (`?possum`)\n\n\n## Data manipulation challenge {background-color=\"#a4c5ff\"}\n\n(separate tasks)\n\n- Subset the possum data to keep only males from Victoria and discard the _site_ column\n\n- Add a column with the tail length column in inches \n\n- Keep only sex, age, and site for females with head length > 91 cm\n\n- Suggest additional manipulations\n\n## tidy data with `tidyr`\n\n![](imgs/widelong.png){fig-align=\"center\"}\n\n::: columns\n::: {.column width=\"50%\"}\n### Wide Data\nHuman-readable  \nEasier entry  \nEasier interactive editing\n:::\n\n::: {.column width=\"50%\"}\n### Long Data\nUsually tidy  \nAnalysis-ready  \nMaps well to graphic parameters\n:::\n:::\n\n\n## Pivoting data\n\n\n- you may know these operations as `cast`, `melt`, `gather`, or `spread`\n\n![](imgs/pivotingintro.gif)\n  \n## \n\n<br/>\nwide to long: `pivot_longer()`  \n\n:::{.med-code}\n```{r}\n#| eval: false\n#| echo: true\n \npivot_longer(data, cols, names_to, values_to)\n```\n:::\n<br/>\nlong to wide: `pivot_wider()` \n\n:::{.med-code}\n```{r}\n#| echo: true\n#| eval: false\n \npivot_longer(data, cols,\n             names_from, values_from)\n```\n:::\n##\n\n```{r}\n#| eval: true\n#| echo: false\n\ndining <- \ntibble::tribble(\n     ~area_type, ~district, ~coffee_shops, ~fast_food, ~fish_chips,\n  \"Residential\",   \"South\",            2L,         3L,          1L,\n   \"Commercial\",   \"North\",           12L,         6L,          4L,\n     \"Suburban\",   \"South\",            2L,         4L,          3L,\n        \"Rural\",    \"East\",            0L,         2L,          0L\n  )\n\n```\n\n::: {.panel-tabset}\n## dining\n```{r}\n#| eval: true\n#| echo: false\n\ndining %>% gt() %>% \n    tab_style(\n    cell_text(size = '24px'),\n    locations = list(cells_body(),\n                     cells_column_labels(everything()),\n                     cells_title())) %>% \n  tab_options(table.background.color=\"#f4f4f9\")\n```\n\n## Data setup\n```{r panel-chunk-dining}\n#| eval: false\n#| echo: true\n\ndining <- \ntibble::tribble(\n     ~area_type, ~district, ~coffee_shops, ~fast_food, ~fish_chips,\n  \"Residential\",   \"South\",            2L,         3L,          1L,\n   \"Commercial\",   \"North\",           12L,         6L,          4L,\n     \"Suburban\",   \"South\",            2L,         4L,          3L,\n        \"Rural\",    \"East\",            0L,         2L,          0L\n  )\n```\n:::\n\n\n\n\n[Variables:]{style=\"font-size: 1.2em; text-align: center\"}\n\narea type\n\ndistrict\n\ntype of resturant\n\nnumber of restaurants\n\n## Wide to long\n\n```{r}\n#| eval: true\n#| echo: true\n\ndining_long <- dining %>%\n  pivot_longer(\n    cols = c(coffee_shops, fast_food, fish_chips),\n    names_to = \"restaurant_type\",\n    values_to = \"n_restaurants\")\n```\n\n```{r}\n#| eval: true\n#| echo: false\n\ndining_long <- dining %>%\n  pivot_longer(\n    cols = c(coffee_shops, fast_food, fish_chips),\n    names_to = \"restaurant_type\",\n    values_to = \"n_restaurants\")\n```\n\n\n**`cols`** Which columns have data in their names  \n\n\n**`names_to`** Name for the new column to be created from the names of each `cols`  \n\n**`values_to`** Name of the column to be created from the contents of the cells in **`cols`**  \n\n##\n\n```{r}\n#| eval: false\n#| echo: true\n\ndining %>%\n  pivot_longer(\n    cols = c(coffee_shops, fast_food, fish_chips),\n    names_to = \"restaurant_type\",\n    values_to = \"n_restaurants\")\n```\n\n##\n\n```{r}\n#| eval: true\n#| echo: true\ndining %>%\n  pivot_longer(\n    cols = c(coffee_shops, fast_food, fish_chips),\n    names_to = \"restaurant_type\",\n    values_to = \"n_restaurants\")\n```\n\n\n\n## Long to wide\n\n```{r}\n#| eval: false\n#| echo: true\n\ndining_long %>% \n  pivot_wider(names_from = restaurant_type, \n              values_from = n_restaurants)\n```\n\n\n**`names_from`** Which columns' distinct values will be used for new _column names_\n\n**`values_from`** Which column has the _cell values_ for the new output columns\n\n##\n\n```{r}\n#| eval: true\n#| echo: true\n\ndining_long %>% \n  pivot_wider(names_from = restaurant_type, \n              values_from = n_restaurants)\n```\n\n\n## Practice - Pivoting {background-color=\"#a4c5ff\"}\n\n- Load the dataset \"**arbuthnot**\" bundled with `openintro`\n\n- Identify the data structure and tidy the data\n\n- pivot back to inital structure\n\n## Dates and times with the `lubridate`\n\n::: columns\n::: {.column width=\"30%\"}\n![](imgs/lubridatelogo.png)\n:::\n\n::: {.column width=\"70%\"}\nWorking with dates and times (in general, and even in R) can be frustrating\n:::\n:::\n\n\n`lubridate` provides objects and functions for intuitive parsing of dates and times with less ambiguity \n\n> Easier temporal calculations (e.g. subtract dates, calculate periods of time, etc.)\n\n## \n\n:::{.med-code}\n```{r}\nlibrary(lubridate)\n# parse from text string to year/month/day\ndecdate <-  ymd(\"2010/12/21\") \nclass(decdate)\nyear(decdate)\nmonth(decdate)\nday(decdate)\nymd(\"2023-11-20\") - decdate\n```\n:::\n\n## Parsing dates {background-color=\"#a4c5ff\"}\n\n- Load the `birds` data from {openintro}\n\n- Examine the **date** column\n\n- Parse the date and create separate columns for month, day, and year\n\n- Put mdy together in a new variable (hint: `make_date` function)\n\n## Factors made easy with `forcats`\n\n### Categorical variables\n::: columns\n::: {.column width=\"50%\"}\n* Fixed set of possible values (levels)\n* Levels can be ordered (very useful for visualization)\n:::\n\n::: {.column width=\"50%\"}\n![](imgs/factor.jpg)\n:::\n:::\n\n\n## Factors\n\n:::{.med-code}\n```{r}\n#| echo: true\n#| output-location: slide\ndata(fastfood,package = \"openintro\")\nhead(fastfood)\n```\n:::\n\n## \n\nVariable as character vector\n\n:::{.big-code}\n```{r}\n#| echo: true\n#| output-location: slide\nfastfood$restaurant\n\n```\n:::\n\n## \n\nMake into factor\n\n:::{.big-code}\n```{r}\n#| echo: true\n#| output-location: slide\nfactor(fastfood$restaurant)\n```\n:::\n\n## \n\nQuery factor levels\n\n:::{.med-code}\n```{r}\n#| echo: true\nlevels(factor(fastfood$restaurant))\n```\n:::\n\n> How are the levels ordered?\n\n## Factor levels\n\nWe can specify factor levels manually with the `levels` argument\n\n```{r}\n#| echo: true\nnewlevels <- c(\"Mcdonalds\",\"Arbys\",\"Burger King\",\"Subway\",\n               \"Chick Fil-A\",\"Dairy Queen\",\"Taco Bell\",\"Sonic\")\nlevels(factor(fastfood$restaurant,levels = newlevels))\n```\n\n## Factors made easy with `forcats` \n\n::: columns\n::: {.column width=\"61%\"}\nTools for working with categorical variables\n:::\n\n::: {.column width=\"38%\"}\n![](imgs/forcatslogo.png)\n:::\n:::\n\n- reorder a factor with another variable's values\n- suppress alphabetical ordering\n- reverse factor levels\n- group levels\n\n##\n\n```{r}\nsneakers\n```\n\n\n##\n\n:::{.med-code}\n```{r}\nfactor(sneakers$Sport)\n```\n:::\n\nQuery levels\n\n:::{.med-code}\n```{r}\nfactor(sneakers$Sport) %>% levels()\n```\n:::\n\n##\n\nKeep order of appearance\n\n:::{.med-code}\n```{r}\nlibrary(forcats)\nfct_inorder(sneakers$Sport)\n```\n:::\n\n##\n\nOrder by frequency\n\n:::{.med-code}\n```{r}\nfct_infreq(sneakers$Sport)\n```\n:::\n\n##\n\nReverse order\n\n:::{.med-code}\n```{r}\nfct_rev(sneakers$Sport)\n```\n:::\n\n##\n\nSubset - one shoe per sport\n```{r}\nsneakersSubset <- sneakers %>% slice(1,3,4,6) \nsneakersSubset\n```\n\nReorder levels by price\n\n```{r}\nfct_reorder(sneakersSubset$Sport,sneakersSubset$Price)\n```\n\n`.desc` argument for descending order\n\n# Data visualization with `ggplot2`\n\n## Graphics in R\n\nSince its initial release, R has had the ability to produce customizable \npublication-quality graphics.\n\n- Base R plots \n- Lattice plots (`lattice` package)\n- `ggplot2`\n- wrapper packages (`highcharter`, `echarts4r`)\n\n::: {style=\"text-align: right\"}\n[4. Graphics with base R](https://intro2r.com/graphics_base_r.html])\\  \nAn Introduction to R\\\nAlex Douglas et al. (2023)\n:::\n\n## \n\n:::{style=\"text-align:center\"}\n[The Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0)  \nWilkinson (1999, 2005)  \n\n[A Layered Grammar of Graphics](ttps://doi.org/10.1198/jcgs.2009.07098)  \nHadley Wickham (2007)\n:::\n\n::: {layout-nrow=1}\n![](imgs/ggwilk.jpg)\n![](imgs/layered.png){width=\"20%\"}\n![](imgs/ggplot2.png){width=\"20%\"}\n![](imgs/ggpltcht.jpeg){width=\"20%\"}\n:::\n\n## \n\n**Grammar**: how words and their component parts combine to form sentences\n\n<br/>\n\n- With a grammar we don't need to memorize individual sentences to communicate in a language\n\n- If we learn a grammar for graphics, we can describe and build a wide range of statistical graphics from scratch\n\n\n## Layered graphics\n\n![](imgs/grammar.png){fig-align=\"center\"}\n\n## {background-image=\"imgs/blocks.jpg\"}\n\n### Building a ggplot\n\n<br/>\n\n`data` - object with the data we wish to visualize \n\n<br/>\n\n`aes` (mapping) - definition of how variables in the dataset are mapped to visual properties (aesthetics) of the plot\n\n<br/>\n\n`geom` - geometrical object that represents data\n\n##\n\n::: {.big-code}\n```{r}\n#| eval: false\n#| echo: true\nggplot(data, aes(x,y)) +\n  geom_point()\n```\n:::\n\n</br>\n</br>\n`ggplot()` creates the plot  \n\n`aes()` links variables in the data with visual properties of the plot\n\n`geom_*` defines a layer with a visual representation of the data\n\n##\n\n::: panel-tabset\n\n### lizards\n\n```{r}\n#| eval: true\n#| echo: false\ntibble::tribble(\n  ~length, ~mass,     ~stage,\n      9L,   20L,  \"adult\",\n      8L,   13L, \"juvenile\",\n      7L,   15L, \"juvenile\",\n     13L,   18L,  \"adult\",\n     11L,   21L,  \"adult\",\n      6L,   14L, \"juvenile\"\n  ) %>% gt() %>% \n    tab_style(\n    cell_text(size = '33px'),\n    locations = list(cells_body(),\n                     cells_column_labels(everything()),\n                     cells_title())) %>% \n  tab_options(table.background.color=\"#f4f4f9\")\n```\n\n### Data\n\n```{r}\n#| eval: false\n#| echo: true\n\nlizards <- \ntibble::tribble(\n  ~length, ~mass,     ~stage,\n       9L,   20L,    \"adult\",\n       8L,   13L, \"juvenile\",\n       7L,   15L, \"juvenile\",\n      13L,   18L,    \"adult\",\n      11L,   21L,    \"adult\",\n       6L,   14L, \"juvenile\"\n  )\n\n```\n:::\n\n----------------\n\n::: columns\n::: {.column width=\"50%\"}\n```{r}\n#| echo: false\n \ntibble::tribble(\n  ~length, ~mass,     ~stage,\n       9L,   20L,    \"adult\",\n       8L,   13L, \"juvenile\",\n       7L,   15L, \"juvenile\",\n      13L,   18L,    \"adult\",\n      11L,   21L,    \"adult\",\n       6L,   14L, \"juvenile\"\n  ) %>% gt() %>% tab_style(\n    cell_text(size = '34px'),\n    locations = list(cells_body(),\n                     cells_column_labels(everything()),\n                     cells_title())) %>% \n  tab_options(table.background.color=\"#f4f4f9\")\n\n```\n:::\n\n::: {.column width=\"50%\"}\n```{r}\n#| echo: false\n \ntibble::tribble(\n   ~x,  ~y,     ~shape,\n   9L, 20L,   \"circle\",\n   8L, 13L, \"triangle\",\n   7L, 15L, \"triangle\",\n  13L, 18L,   \"circle\",\n  11L, 21L,   \"circle\",\n   6L, 14L, \"triangle\"\n  ) %>% gt() %>% tab_style(\n    cell_text(size = '34px'),\n    locations = list(cells_body(),\n                     cells_column_labels(everything()),\n                     cells_title())) %>% \n  tab_options(table.background.color=\"#f4f4f9\")\n\n```\n:::\n:::\n\n##\n\n```{r}\n#| echo: false\n#| eval: true\n\nlizards <- \ntibble::tribble(\n  ~length, ~mass,     ~stage,\n       9L,   20L,    \"adult\",\n       8L,   13L, \"juvenile\",\n       7L,   15L, \"juvenile\",\n      13L,   18L,    \"adult\",\n      11L,   21L,    \"adult\",\n       6L,   14L, \"juvenile\"\n  )\n```\n\n\n```{r}\nggplot(data = lizards,     \n  aes(x = length,y = mass))+\n  geom_point()\n```\n\n# Hands-on  {background-color=\"#a4c5ff\"}\n\n- Open the file  `01_first-plots.R`\n- Follow along\n\n# Customization\n\nWe can modify everything that we see in a plot  \n\n::: columns\n::: {.column width=\"30%\"}\n`labs`  \n`fill`  \n`color`  \n`size`  \n`themes`  \n`scale_fill_*`  \n`scale_shape_*`  \n`scale_color_*`  \n:::\n\n::: {.column width=\"70%\"}\nlabels for axes, titles, etc.  \nfill colors     \nborder colors    \nobject sizes  \npreset looks \n  \n  \nmanual control over mappings (color, fill, shape)\n:::\n:::\n\n##\n\n`ggplot2` has built-in defaults for shapes and colors \n\n\n::: {layout-nrow=1}\n![](imgs/defshapes.png)\n![](imgs/defcols.jpg){width=\"40%\"}\n:::\n\n\n## Non-default colors and shapes\n\nManual control with vectors (fills, colors, shapes) for the `values` argument of `scale_*_*` functions\n\n\n:::{.med-code}\n```{r}\n#| eval: false\n#| echo: true\n\nggplot(penguins,\n     aes(x=bill_length_mm,\n         y=flipper_length_mm,\n        shape=species,color=species))+\n geom_point()+\n scale_color_manual(values=\n              c('pink','blue',\"red\"))+\n scale_shape_manual(values=\n              c(20,21,22))\n\n```\n:::\n\n## Colors\n\nHTML names\n\n::: {layout-nrow=1}\n![](https://kktg.net/sgr/wp-content/uploads/colors2.png){width=\"44%\"}\n![](https://kktg.net/sgr/wp-content/uploads/colors4.png){width=\"44%\"}\n:::\n\n## Colors\n\nHex codes\n\n![](imgs/hexpals.png){fig-align=\"center\"}\n\nFree Color Picker (Windows); Gpick (Linux); ColorSlurp (Mac)\n\n\n## Color palettes\n\n::: columns\n::: {.column width=\"50%\"}\n- Specify a named palette  \n- Define with a vector\n:::\n\n::: {.column width=\"50%\"}\n![](imgs/ejemplocool.png){fig-align=\"center\"}\n:::\n:::\n\nüîó Example gallery for [`paletteer`](https://pmassicotte.github.io/paletteer_gallery/)  \n\nüîó [Pokepalettes](https://pokepalettes.com/)\n\n## Legend titles\n\nThe `name` arguments modifies the title for legends created automatically for each mapping  \n\n:::{.med-code}\n```{r}\n#| eval: false\n#| echo: true\n\naes(x,y, color = var1, shape = var2)+\n\tscale_color_manual(values=c('red','blue'), \n\t                   name= 'Variable One')+\n  scale_shape_manual(values=c(20,21),\n\t                   name = 'Variable Two')\n\t\n\n```\n\n:::\n\n## *Quantitative* variables + color:  \n\n- Default color ramp or named gradient\n- Define gradient with `scale_x_gradient` \n\n```{r}\n#| eval: true\n#| echo: false\nlibrary(palmerpenguins)\ndata(penguins)\n```\n\n```{r}\n#| echo: true\n#| output-location: column-fragment\n\nggplot(penguins,\n  aes(x=bill_length_mm,\n      y=flipper_length_mm,\n      fill=body_mass_g))+\n  geom_point(size=4,\n             color=\"white\",\n             pch=21)\n```\n\n## Hands-on: Customization  {background-color=\"#a4c5ff\"}\n\nModifying graphical parameters\n\n:::{style=\"font-size: 1.5em;\"}\n`02_customizing.R`{style=\"color:orange\"}  \n:::\n\n## Themes \n\nControl multiple visual parameters without altering the underlying data\n\n- 8 themes available with `ggplot2`  \n- packages with additional themes: [`ggthemes`](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/), [`artyfarty`](https://datarootsio.github.io/artyfarty/articles/introduction.html), [`hrbrthemes`](https://github.com/hrbrmstr/hrbrthemes)`  \n- create our own\n\n![](imgs/themesgg.png){width=\"60%\"}\n\n## Color ramps\n\n- More accurate visual perception of central value and increments of the underlying variables\n\n![](imgs/batlow.png){fig-align=\"center\" fig-size=\"80%\"}\n  \n:::{style=\"text-align:center\"}  \nüîó Fabio Crameri - [Scientific Color Maps](https://www.fabiocrameri.ch/colourmaps/)\n:::\n\n## Perceptually uniform color ramps\n\n::: columns\n::: {.column width=\"45%\"}\n![](imgs/viridis-scales.png){width=\"65%\"}\n![](imgs/scicopals.png){width=\"65%\"}\n:::\n\n::: {.column width=\"55%\"}\n### viridis\n- installed with `ggplot2`\n- call with `scale_x_viridis()`  \n  \n### scico\n- provided by `scico` package\n- divergent & sequential\n:::\n:::\n\n## Hands-on: Color ramps {background-color=\"#a4c5ff\"}\n\nColors and continuous variables\n\n:::{style=\"font-size: 1.5em;\"}\n`03_ramps.R`{style=\"color:orange\"}  \n:::\n\n\n## Exporting graphics\n\n### Our options\n\n- 'Export' button in RStudio\n- Graphical devices\n- `ggsave()`  \n- Formats: png, jpg, pdf, etc.\n\n## Export with graphical device\n\n:::{.callout-note}\n## \nWe can asign plots to workspace objects\n:::\n\n```{r}\n#| echo: true\n#| eval: false\n\nmy_plot <- \nggplot(penguins,\n       aes(x=bill_length_mm,\n          y=flipper_length_mm))+\n  geom_point(size=2,pch=21)\n\npng(filename = \"myplot.png\",\n    width = 10, \n    height = 10,\n    units =\"cm\",\n    res = 200)\nmy_plot\ndev.off()\n```\n\n## `agg` devices\n\n- Fast and crisp\n- Provided with `ragg`\n\n::: {.med-code}\n```{r}\n#| echo: true\n#| eval: false\n\nagg_png(filename = \"myraggplot.png\",\n    width = 10, height = 10,\n    units =\"cm\",\n    res = 200)\nmy_plot\ndev.off()\n```\n:::\n\n## `ggsave()`\n\n- Will use `ragg` if it is installed\n\n::: {.big-code}\n```{r}\n#| echo: true\n#| eval: false\n\nggsave(my_plot, \n  filename = \"myplotgs.png\",\n    width = 10, \n    height = 10,\n    units =\"cm\",\n    dpi = 200)\n\n```\n:::\n\n## Looks off?\n\n![](imgs/exportando.png)\n\n`scale` argument for `ggsave()` and `scaling` in `ragg` devices will adjust points and text with a scaling factor\n\n\n## Facetting\n\n![](imgs/exprgutsoct2021_final.png){fig-align=\"center\"}\n\n## Facet functions\n\n`facet_wrap()`{style=\"color:orange\" size=1.2em} splits by one variable and wraps the resulting subplots\n\n`facet_grid()`{style=\"color:orange\" size=1.2em} splits by combinations of variables\n\n![](imgs/position-facets.png){fig-align=\"center\"}\n\n## Hands-on: Facets {background-color=\"#a4c5ff\"}\n\n`starbucks ` coffee shop data from `openintro`\n\n:::{style=\"font-size: 1.5em;\"}\n`04_facets.R`{style=\"color:orange\"}  \n:::\n\n\n## Factors and plots\n\nValues for categorical variables will be ordered alphabetically unless specified otherwise\n\n```{r}\n#| echo: false\n#| eval: true\n\ndata(\"starbucks\",package = \"openintro\")\n```\n\n\n```{r}\n#| echo: true\n#| eval: true\nggplot(starbucks,aes(fat,protein))+\n  geom_point()+facet_wrap(\"type\")\n```\n\n\n## Hands-on: Reordering factor levels {background-color=\"#a4c5ff\"}\n\n`babies_crawl` crawling age data from `openintro`\n\n:::{style=\"font-size: 1.5em;\"}\n`05_reorder.R`{style=\"color:orange\"}  \n:::\n\n:::{.callout-note}\n## \nCrawling age (weeks) in relation to temperature and birth month. From Benson (1993).\n:::\n\n\n## Questions?\n\n# Thank you!"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":5,"fig-height":6,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","highlight-style":"printing","output-file":"evolmar-tidyverse.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.450","auto-stretch":true,"title":"Hands-On Data Manipulation and Visualization with the tidyverse and ggplot2","subtitle":"Physalia Courses Online - Evolmar 2023","author":"Luis D. Verde Arregoitia","editor":"source","knitr":{"opts_chunk":{"dev":"ragg_png","retina":3,"dpi":200}},"theme":"curso_styles.scss","transition":"fade","progress":true,"previewLinks":true,"hideInactiveCursor":true,"pause":true}}},"projectFormats":["html"]}